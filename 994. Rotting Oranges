/**
 * @param {number[][]} grid
 * @return {number}
 */
const emptyCell = 0;
const freshOrange = 1;
const rottenOrange = 2;

var orangesRotting = function(grid) {
    return detectRottenOrange(grid, 0);
};

function detectRottenOrange (grid, elapsedTime) {
    let gridCopy =  JSON.parse(JSON.stringify(grid));
    let direction = [[1, 0], [-1, 0], [0, 1], [0, -1]];
    let gotRottenOrangeCount = 0;
    grid.forEach((row, rowIndex)=>{
        row.forEach((val, columnIndex)=> {
            if(val == rottenOrange){
                direction.forEach((point) => {
                    let i = point[0] + rowIndex;
                    let j = point[1] + columnIndex;
                    if(grid[i] && grid[i][j] == freshOrange){
                        gridCopy[i][j] = rottenOrange;
                        gotRottenOrangeCount++;
                    }
                });
            }
        });
    });
    
    if(gotRottenOrangeCount == 0){
        return (countFreshOrange(gridCopy) == 0) ? elapsedTime : -1;
    }
    return detectRottenOrange(gridCopy,elapsedTime+1);
}

function countFreshOrange(grid){
       let freshOrangeCount =0;
       grid.forEach((row) => {
            row.forEach((value) => {
                if(freshOrange == value){
                    freshOrangeCount++;
                }
            })
        })
    return freshOrangeCount;
}
